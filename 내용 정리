----------------------------------------------
11장 JSP 정의와 구성 요소
----------------------------------------------

11.1 JSP 등장 배경

■ 서블릿으로 화면 구현시 문제점
- 웹 프로그램의 화면 기능이 복잡해지므로 서블릿의 자바 기반으로 화면 기능 구현시 어려움이 발생함
- 디자이너 입장에서 화면 구현 시 자바 코드로 인해 작업이 어려워함
- 서블릿에 비즈니스 로직이 화면 기능이 같이 있다 보니 개발 후 유지관리가 불편함

해결책
- 서블릿의 비즈니스 로직과 결과를 보여주는 화면 기능을 분리
- 비즈니스 로직과 화면을 분리함으로써 개발자는 비즈니스 로직 구현에 집중하고,
디자이너는 화면 기능 구현에만 집중할 수 있다.
- 개발 후 재사용과 유지관리가 훨씬 수월해 진다.


■ JSP 구성 요소

- HTML 태그, CSS 태그, 자바스크립트 코드
- JSP 기본 태그
- JSP 액션 태그
- 개발자가 직접 만들거나 프레임워크에서 제공하는 커스텀(custom)태그

----------------------------------------------

11.2 JSP 3단계 작업 과정

1. 변환 단계
    : 컨테이너는 JSP파일을 자바 파일로 변환
2. 컴파일 단계
    : 컨테이너는 변환된 자바파일을 클래스 파일로 컴파일한다.
3. 실행 단계
    : 컨테이너는 class 파일을 실행하여 그 결과(HTML, CSS와 자바스크립트 코드)를 브라우저에 전송 출력.

----------------------------------------------

11.3 JSP 페이지 구성 요소

■ JSP 페이지 구성 요소
- 디렉티브 태그
- 스크립트 요소
- 표현언어
- 내장 객체
- 액션 태그
- 커스텀 태그

----------------------------------------------

11.4 디렉티브 태그

- 페이지 디렉티브 태그
 : JSP 페이지 전반적인 정보를 설정할 때 사용
- 인클루드 디렉티브 태그
 : 공통으로 사용하는 JSP 페이지를 다른 JSP 페이지에 추가할 때 사용
- 태그라이브 디렉티브 태그
 : 개발자나 프레임워크에서 제공하는 태그를 사용할 때 사용

■ 인클루드 디렉트비 특징
- 재사용성이 높다
- JSP 페이지의 유지관리가 쉽다.

인클루드 디렉티브 태그 설정
    <%@ include file = "공통기능.jsp"%>

----------------------------------------------
12장 JSP 스크립트 요소 기능
----------------------------------------------

12.1 JSP 스크립트 요소
- JSP 페이지에서 여러 가지 동적인 처리를 제공하는 기능
<% %> 기호 안에 자바 코드로 구현.  <% %> 를 스크립트릿 이라고 부른다.

- 선언문 : JSP에서 변수나 메소드를 선언할 떄 사용
- 스크립트릿 : JSP에서 자바 코드를 작성할 때 사용
- 표현식 : JPS에서 변수의 값을 출력할 때 사용


12.2 선언문 사용하기
    <%! 멤버 변수 or 변수 메소드 %>

12.3 스크립트릿 사용하기
    <% 자바 코드 %>

12.4 표현식
    <%= 값 or 자바변수 or 자바 식 %>
    ※ 표현식내에는 세미콜론이 있으면 안된다.

12.5 JSP 주석문 사용하기
    <%-- 내용 --%>

12.6 스크립트 요소 이용해 실습하기

■ 주의사항
    <% %> 열고 닫는게 누락되는 경우가 많다.

----------------------------------------------

12.7 내장 객체(내장 변수) 기능
    JSP가 서블릿으로 변환 시 컨테이너가 자동으로 생성 시키는서블릿 멤버 변수

■ JSP에서 제공하는 내장 객체

request     : 클라이언트의 요청 정보를 저장
response    : 응답 정보를 저장
out         : JSP 페이지에서 결과를 출력
session     : 세션 정보를 저장
application : 컨텍스트 정보를 저장
pageContext : JSP 페이지에 대한 정보를 저장
page        : JSP 페이지에서 서블릿 인스턴스를 저장
config      : JSP 페이지에 대한 설정 정보를 저장
exception   : 예외 발생 시 예외를 처리

■ 내장 객체들의 스코프
page        : 한 번의 요청에 대해 하나의 JSP페이지를 공유
request     : 한 번의 요청에 대한 같은 요청을 공유하는 JSP페이지를 공유
session     : 같은 브라우저에서 공유
application : 같은 애플리케이션에서 공유

----------------------------------------------

12.8 JSP 페이지 예외 처리하기

■ JSP 에서 예외 처리 페이지 만든는 과정

1) 예외 처리 담당 jsp를 만든다.
<%@ page isErrorPage='true' %>

2) 예외 발생 시 예외 처리 담당 JSP 파일을 지정한다.
<%@ page errorPage='addException.jsp' %>

■ 예외 코드드에 따른 예외 페이지 과정
- 전체 JSP 페이지에 대해 발생하는 오류에 대해서 화면에 표시되는 각각의 예외 처리 JSP 페이지를 지정한다.

■ web.xml에 지정하는 방법
<error-page>
    <error-code>에러코드</error-code>
    <location>오류 페이지 위치</location>
</errorPage>

■ 만약 한 개의 JSP 페이지에 페이지 디렉티브의 errorPage 속성과 web.xml이 같이 지정되어 있으면
    페이지 디렉티브의 errorPage가 우선적으로 나타난다.

12.9 JSP welcome 파일 지정하기

■ web.xml에서 주소를 기입하면 홈페이지로 사용할 수 있다.
    <welcome-file-list>
        <welcome-file>주소</welcome>
        <welcome-file>주소</welcome>
    </welcome-file-list>

----------------------------------------------

12.10 스크립트 요소 이용해 회원 정보 조회하기

■ MemberVO, MemberDAO 클래스 생성후
search.jsp 에서 검색 폼 -- 이름 전달
 --> member.jsp 에서 동작 : 
    - memberVO 필드를 갖고 MemberDAO에서 동작
 -> member.jsp 에서 회원 정보 출력

----------------------------------------------
13장 자바 코드를 없애는 액션 태그
----------------------------------------------

■ 액션 태그 등장 배경
- 화면이 복잡해짐에 따라 디지이너는 HTML 태그에 자바 코드를 같이 써야 하는 불편이 생김
- 따라서 스크립트릿의 자바 코드를 대체하는 액션 태그가 등장하게 됨

■ 여러가지 액션 태그
<jsp:include>   : 이미 있는 JSP를 현재 JSP에 포함하는 태그
<jsp:forward>   : 서블릿에서 requestDispatcher 클래스의 포워딩 기능을 대신하는 기능
<jsp:useBean>   : 객체를 생성하기 위한 new 연산자를 대신하는 태그
<jsp:setProperty>: setter를 대신하는 태그
<jsp:getProperty>: getter를 대신하는 태그

13.1 인클루드 액션 태그 사용하기

■ 인클루드 액션 태그(include Action Tag)
- 인클루드 디렉티브 태그처럼 화면을 분활해서 관리하는데 사용되는 태그
- 화면의 유지 보수 및 재사용성을 높일 수 있다.

■ 인크루드 액션  태그의 실행 과정
1) 브라우저 요청 시 JSP 파일을 컴파일
2) 컴파일 시 <jsp:include>가 지시하는 JSP를 요청한다
3) 요청된 JSP를 컴파일한다.
4) 컴파일된 JSP가 응답을 보낸다.
5) JSP는 브라우저에서 요청한 응답 결과를 출력한다.

----------------------------------------------

13.2 포워드 액션 태그 사용하기

■ 포워드 액션 태그의 형식
    <jsp:forward page="포워딩할 JSP 페이지">
    ...
    </JSP:forward>

----------------------------------------------

13.3 useBean, setProperty, getProperty 액션 태그 사용하기

■ 자바 빈(Bean)
- java EE 프로그래밍 시 여러 객체를 거치면서 만들어지는 데이터를 저장하거나 전달하는데 사용되는 클래스
- 자바의 DTO(Data Transfer Object, 데이터 전송 객체) 클래스, VO(Value Class, 값 객체) 클래스와 같은 개념

■ 자바 빈(Bean) 특징
- 속성의 접근 제한자는 private 이다.
- 각 속성(attribute, property)은 각각의 setter/getter를 가진다.
- setter/getter 이름의 첫 글자는 반드시 소문자여야 한다.
- 인자 없는 생성자를 반드시 가지며 다른 생성자도 추가할 수 있다.

■ 유즈 빈 액션 태그
- JSP 페이지에서 자바 빈을 대체하기 위한 태그

■ 유즈빈 액션 태그 형식
    <jsp:useBean id= "빈 이름" class="패키지 이름을 포함한 자바 빈 클래스 이름" [scope="접근범위"]/>

■ setProperty   | useBean의 속성에 값을 설정 |
    <jsp:setProperty name="자바 빈 이름" property="속성 이름" value="값"/>

■ getProperty   | useBean의 속성 값을 얻는  태그 |
    <jsp:getProperty name="자바 빈 이름" property="속성 이름" />

■ <jsp:param> 액션 태그는 <include>액션 태그와
  <forward> 액션 태그 사용 시 다른 JSP로 매개변수 값을 전송할 때 사용

----------------------------------------------
14장 표현 언어와 JSTL
----------------------------------------------

14.1 표현 언어란?
- 자바 코드가 들어가는 표현식을 좀 더 편리하게 사용하기 위해 JSP 2.0 부터 도입된 데이터 출력 기능

■ 표현 언어의 특징
- 기존 표현식보다 편리하게 값을 출력
- 변수와 여러 가지 연산자를 표함할 수있다
- JSP의 내장 객체에 저장된 속성 및 자바의 빈 속성도 표현 언어에서 출력할 수 있다.
- 표현 언어 자체 내장 객체도 제공된다.
- JSP 페이지 생성 시 기본 설정은 표현 언어를 사용할 수 없다.
- 페이지 디렉티브 태그에서는 반드시 isELIgnored=false 로 설정해야 한다.

■ 표현 언어의 형식
    ${표현식 or 값}

----------------------------------------------

14.2 표현 언어 내장 객체(내장 변수)

■ 여러 가지 내장 객체
스코프   | pageScope        | JSP의 page와 같은 기능, page 영역에 바인딩된 객체를 참조
        | requestScope      | JSP의 request와 같은 기능을 하고 request에 바인딩된 객체를 참조
        | sessionScope      | JSP의 session과 같은 기능을 하고 session에 바인딩된 객체를 참조
        | applicationScope | JSP의 application과 같은 기능을 하고 application에 바인딩된 객체를 참조
---------------------------

요청  매개변수   | param        | request.getParameter() 메소드를 호출한 것과 같으며,
                               | 한 개의 값을 전달하는 요청 매개변수를 처리
                | paramValues  | request.getParameterValues() 메소드를 호출한 것과 같으며,
                               | 여러 개의 값을 전달하는 요청 매개변수를 처리
---------------------------

헤더 값  | header       | request.getHeader() 메소드를 호출한 것과 같으며 요청 헤더 이름의 정보를 단일 값으로 반환
        | headerValues  | request.getHeader() 메소드를 호출한 것과 같으며 요청 헤더 이름의 정보를 배열로 반환
---------------------------

쿠키값        | Cookies       | 쿠키 이름의 값을 반환
---------------------------

JSP 내용      | pageContext  | pageContext 객체를 참조할 때 사용
---------------------------

초기 매개변수 | initParam  | 컨텍스트의 초기화 매개변수 이름의 값을 반환
---------------------------

■ requestScope를 사용하면
- request 객체에 바인딩된 데이터에 접근할 수 있다.
- session이나 application 객체에 바인딩된 데이터는 sessionScope나 applicationScope로 접근할 수 있다.

■ Collection 객체 사용
    ${Collection 객체이름[index].속성이름}

■ HashMap 사용
    ${HashMap객체이름.키이름}

■ has-a 관계 빈 실습
: 객체가 다른 객체를 속성으로 가지는 경우를 has-a 관계라고 한다.

사용형식은
    ${부모이름.자식속성이름.속성이름}

----------------------------------------------

14.3 표현 언어로 바인딩 속성 출력하기

표현언어를 사용하면 자바 코드를 사용하지 않고
바인딩된 속성 이름으로 바로 값을 출력할 수 있다.

ex)
1) request.setAttribute("id", "hong");
    ---> <jsp:forward page="포워드 페이지.jsp"/> --->
    String id = (String)request.getAttribute("id");

    표현식              : <%= id%>
    바인딩 된 속성이름  : ${id}

2) MemberBean member = new MemberBean("lee", "1234");
    request.setAttribute("member", member);
     ---> <jsp:forward page="포워드 페이지.jsp"/> --->

    // 바인딩 시 속성으로 각각의 MemberBean 속성에 접근하여 출력
    ${member.id}
    ${member.pwd}

3) List membersList = new ArrayList();
    MemberBean m1 = new MemberBean("lee", "1234");
    membersList.add(m1);
    request.setAttribute("membersList", membersList);
    ---> <jsp:forward page="포워드 페이지.jsp"/> --->

    // 표현 언어에서 속성 이름으로 ArrayList에 접근한 후 인덱스를 이용해 첫 번째 회원 정보 출력
    ${membersList[0].id}
    ${membersList[0].pwd}

■ 스코프 우선순위
    page > request > session > application

----------------------------------------------

14.4 커스텀 태그

■ 커스텀 태그 종류(2가지)
1) JSTL(JSP Standard Tag Libraray)
    : JSP 페이지에서 가장 많이 사용하는 기능을 태그로 제공하며,
      JSTL 라이브러리를 따로 설치해서 사용

2) 개발자가 만든 커스텀 태그
    : 스트러츠나 스프링 프레임워크에서 미리 만들어서 제공

----------------------------------------------

14.5 JSP 표준 태그 라이브러리(JSTL)

    http://tomcat.apache.org/download-taglibs.cgi
    에서 다운로드 한다.

----------------------------------------------

14.6 Core 태그 라이브러리 사용하기

- 자바로 구현한 변수 선언, 조건식, 반복문 기능들을 태그로 대체한다.
- 사용전 반드시 taglib 디렉티브 태그를 선언해야 한다.
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

■ Core 태그 라이브러리 기능

- 변수선언
<c:set>         : JSP 페이지에서 변수를 지정
<c:remove>      : 지정된 변수를 제거

- 흐름제어
<c:if>          : 조건문 사용
<c:choose>      : switch문을 사용 <c:when>과 <c:otherwise> 서브 태그를 갖는다.
<c:forEach>     : 반복문을 사용
<c:forTokens>   : 구분자로 분리된 각각의 토큰을 처리할 때 사용

-URL 처리
<c:import>      : URL을 이용해 다른 자원을 JSP 페이지에 추가
<c:redirect>    : response.sendRedirect()기능을 수행
<c:url>         : 요청 매개변수로부터 URL을 생성

- 기타 태그
<c:catch>       : 예외 처리에 사용
<c:out>         : JspWriter에 내용을 처리한 후 출력

----------------------------------------------

14.6.1 <c:set> 태그

■ <c:set> 태그
    <c:set var="변수 이름" value="변수값" [scope="scope 속성 중 하나"] />

----------------------------------------------

14.6.2 <c:remove> 태그

■ <c:remove> 태그 형식
    <c:remove var="변수 이름" [scope="scope 속성 중 하나"] />

----------------------------------------------

14.6.3 <c:if> 태그

■ <c:if> 태그 형식
    <c:if test="${조건식}" var="변수이름" [scope="scope 속성 중 하나"] />
    ...
    </c:if>

----------------------------------------------

14.6.4 <c:choose> 태그

■ <c:choose> 형식
    <c:choose>
        <c:when test="조건식1"> 본문내용1 </c:when>
        <c:when test="조건식2"> 본문내용2 </c:when>
    </c:choose>

----------------------------------------------
