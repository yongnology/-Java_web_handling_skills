----------------------------------------------
11장 JSP 정의와 구성 요소
----------------------------------------------

11.1 JSP 등장 배경

■ 서블릿으로 화면 구현시 문제점
- 웹 프로그램의 화면 기능이 복잡해지므로 서블릿의 자바 기반으로 화면 기능 구현시 어려움이 발생함
- 디자이너 입장에서 화면 구현 시 자바 코드로 인해 작업이 어려워함
- 서블릿에 비즈니스 로직이 화면 기능이 같이 있다 보니 개발 후 유지관리가 불편함

해결책
- 서블릿의 비즈니스 로직과 결과를 보여주는 화면 기능을 분리
- 비즈니스 로직과 화면을 분리함으로써 개발자는 비즈니스 로직 구현에 집중하고,
디자이너는 화면 기능 구현에만 집중할 수 있다.
- 개발 후 재사용과 유지관리가 훨씬 수월해 진다.


■ JSP 구성 요소

- HTML 태그, CSS 태그, 자바스크립트 코드
- JSP 기본 태그
- JSP 액션 태그
- 개발자가 직접 만들거나 프레임워크에서 제공하는 커스텀(custom)태그

----------------------------------------------

11.2 JSP 3단계 작업 과정

1. 변환 단계
    : 컨테이너는 JSP파일을 자바 파일로 변환
2. 컴파일 단계
    : 컨테이너는 변환된 자바파일을 클래스 파일로 컴파일한다.
3. 실행 단계
    : 컨테이너는 class 파일을 실행하여 그 결과(HTML, CSS와 자바스크립트 코드)를 브라우저에 전송 출력.

----------------------------------------------

11.3 JSP 페이지 구성 요소

■ JSP 페이지 구성 요소
- 디렉티브 태그
- 스크립트 요소
- 표현언어
- 내장 객체
- 액션 태그
- 커스텀 태그

----------------------------------------------

11.4 디렉티브 태그

- 페이지 디렉티브 태그
 : JSP 페이지 전반적인 정보를 설정할 때 사용
- 인클루드 디렉티브 태그
 : 공통으로 사용하는 JSP 페이지를 다른 JSP 페이지에 추가할 때 사용
- 태그라이브 디렉티브 태그
 : 개발자나 프레임워크에서 제공하는 태그를 사용할 때 사용

■ 인클루드 디렉트비 특징
- 재사용성이 높다
- JSP 페이지의 유지관리가 쉽다.

인클루드 디렉티브 태그 설정
    <%@ include file = "공통기능.jsp"%>

----------------------------------------------
12장 JSP 스크립트 요소 기능
----------------------------------------------

12.1 JSP 스크립트 요소
- JSP 페이지에서 여러 가지 동적인 처리를 제공하는 기능
<% %> 기호 안에 자바 코드로 구현.  <% %> 를 스크립트릿 이라고 부른다.

- 선언문 : JSP에서 변수나 메소드를 선언할 떄 사용
- 스크립트릿 : JSP에서 자바 코드를 작성할 때 사용
- 표현식 : JPS에서 변수의 값을 출력할 때 사용


12.2 선언문 사용하기
    <%! 멤버 변수 or 변수 메소드 %>

12.3 스크립트릿 사용하기
    <% 자바 코드 %>

12.4 표현식
    <%= 값 or 자바변수 or 자바 식 %>
    ※ 표현식내에는 세미콜론이 있으면 안된다.

12.5 JSP 주석문 사용하기
    <%-- 내용 --%>

12.6 스크립트 요소 이용해 실습하기

■ 주의사항
    <% %> 열고 닫는게 누락되는 경우가 많다.

----------------------------------------------

12.7 내장 객체(내장 변수) 기능
    JSP가 서블릿으로 변환 시 컨테이너가 자동으로 생성 시키는서블릿 멤버 변수

■ JSP에서 제공하는 내장 객체

request     : 클라이언트의 요청 정보를 저장
response    : 응답 정보를 저장
out         : JSP 페이지에서 결과를 출력
session     : 세션 정보를 저장
application : 컨텍스트 정보를 저장
pageContext : JSP 페이지에 대한 정보를 저장
page        : JSP 페이지에서 서블릿 인스턴스를 저장
config      : JSP 페이지에 대한 설정 정보를 저장
exception   : 예외 발생 시 예외를 처리

■ 내장 객체들의 스코프
page        : 한 번의 요청에 대해 하나의 JSP페이지를 공유
request     : 한 번의 요청에 대한 같은 요청을 공유하는 JSP페이지를 공유
session     : 같은 브라우저에서 공유
application : 같은 애플리케이션에서 공유

----------------------------------------------

12.8 JSP 페이지 예외 처리하기

■ JSP 에서 예외 처리 페이지 만든는 과정

1) 예외 처리 담당 jsp를 만든다.
<%@ page isErrorPage='true' %>

2) 예외 발생 시 예외 처리 담당 JSP 파일을 지정한다.
<%@ page errorPage='addException.jsp' %>

■ 예외 코드드에 따른 예외 페이지 과정
- 전체 JSP 페이지에 대해 발생하는 오류에 대해서 화면에 표시되는 각각의 예외 처리 JSP 페이지를 지정한다.

■ web.xml에 지정하는 방법
<error-page>
    <error-code>에러코드</error-code>
    <location>오류 페이지 위치</location>
</errorPage>

■ 만약 한 개의 JSP 페이지에 페이지 디렉티브의 errorPage 속성과 web.xml이 같이 지정되어 있으면
    페이지 디렉티브의 errorPage가 우선적으로 나타난다.

12.9 JSP welcome 파일 지정하기

■ web.xml에서 주소를 기입하면 홈페이지로 사용할 수 있다.
    <welcome-file-list>
        <welcome-file>주소</welcome>
        <welcome-file>주소</welcome>
    </welcome-file-list>

----------------------------------------------

12.10 스크립트 요소 이용해 회원 정보 조회하기

■ MemberVO, MemberDAO 클래스 생성후
search.jsp 에서 검색 폼 -- 이름 전달
 --> member.jsp 에서 동작 : 
    - memberVO 필드를 갖고 MemberDAO에서 동작
 -> member.jsp 에서 회원 정보 출력

----------------------------------------------
13장 자바 코드를 없애는 액션 태그
----------------------------------------------

■ 액션 태그 등장 배경
- 화면이 복잡해짐에 따라 디지이너는 HTML 태그에 자바 코드를 같이 써야 하는 불편이 생김
- 따라서 스크립트릿의 자바 코드를 대체하는 액션 태그가 등장하게 됨

■ 여러가지 액션 태그
<jsp:include>   : 이미 있는 JSP를 현재 JSP에 포함하는 태그
<jsp:forward>   : 서블릿에서 requestDispatcher 클래스의 포워딩 기능을 대신하는 기능
<jsp:useBean>   : 객체를 생성하기 위한 new 연산자를 대신하는 태그
<jsp:setProperty>: setter를 대신하는 태그
<jsp:getProperty>: getter를 대신하는 태그

13.1 인클루드 액션 태그 사용하기

■ 인클루드 액션 태그(include Action Tag)
- 인클루드 디렉티브 태그처럼 화면을 분활해서 관리하는데 사용되는 태그
- 화면의 유지 보수 및 재사용성을 높일 수 있다.

■ 인크루드 액션  태그의 실행 과정
1) 브라우저 요청 시 JSP 파일을 컴파일
2) 컴파일 시 <jsp:include>가 지시하는 JSP를 요청한다
3) 요청된 JSP를 컴파일한다.
4) 컴파일된 JSP가 응답을 보낸다.
5) JSP는 브라우저에서 요청한 응답 결과를 출력한다.

----------------------------------------------

13.2 포워드 액션 태그 사용하기

■ 포워드 액션 태그의 형식
    <jsp:forward page="포워딩할 JSP 페이지">
    ...
    </JSP:forward>

----------------------------------------------

13.3 useBean, setProperty, getProperty 액션 태그 사용하기

■ 자바 빈(Bean)
- java EE 프로그래밍 시 여러 객체를 거치면서 만들어지는 데이터를 저장하거나 전달하는데 사용되는 클래스
- 자바의 DTO(Data Transfer Object, 데이터 전송 객체) 클래스, VO(Value Class, 값 객체) 클래스와 같은 개념

■ 자바 빈(Bean) 특징
- 속성의 접근 제한자는 private 이다.
- 각 속성(attribute, property)은 각각의 setter/getter를 가진다.
- setter/getter 이름의 첫 글자는 반드시 소문자여야 한다.
- 인자 없는 생성자를 반드시 가지며 다른 생성자도 추가할 수 있다.

■ 유즈 빈 액션 태그
- JSP 페이지에서 자바 빈을 대체하기 위한 태그

■ 유즈빈 액션 태그 형식
    <jsp:useBean id= "빈 이름" class="패키지 이름을 포함한 자바 빈 클래스 이름" [scope="접근범위"]/>

■ setProperty   | useBean의 속성에 값을 설정 |
    <jsp:setProperty name="자바 빈 이름" property="속성 이름" value="값"/>

■ getProperty   | useBean의 속성 값을 얻는  태그 |
    <jsp:getProperty name="자바 빈 이름" property="속성 이름" />

■ <jsp:param> 액션 태그는 <include>액션 태그와
  <forward> 액션 태그 사용 시 다른 JSP로 매개변수 값을 전송할 때 사용

----------------------------------------------
14장 표현 언어와 JSTL
----------------------------------------------

14.1 표현 언어란?
- 자바 코드가 들어가는 표현식을 좀 더 편리하게 사용하기 위해 JSP 2.0 부터 도입된 데이터 출력 기능

■ 표현 언어의 특징
- 기존 표현식보다 편리하게 값을 출력
- 변수와 여러 가지 연산자를 표함할 수있다
- JSP의 내장 객체에 저장된 속성 및 자바의 빈 속성도 표현 언어에서 출력할 수 있다.
- 표현 언어 자체 내장 객체도 제공된다.
- JSP 페이지 생성 시 기본 설정은 표현 언어를 사용할 수 없다.
- 페이지 디렉티브 태그에서는 반드시 isELIgnored=false 로 설정해야 한다.

■ 표현 언어의 형식
    ${표현식 or 값}

----------------------------------------------

14.2 표현 언어 내장 객체(내장 변수)

■ 여러 가지 내장 객체
스코프   | pageScope        | JSP의 page와 같은 기능, page 영역에 바인딩된 객체를 참조
        | requestScope      | JSP의 request와 같은 기능을 하고 request에 바인딩된 객체를 참조
        | sessionScope      | JSP의 session과 같은 기능을 하고 session에 바인딩된 객체를 참조
        | applicationScope | JSP의 application과 같은 기능을 하고 application에 바인딩된 객체를 참조
---------------------------

요청  매개변수   | param        | request.getParameter() 메소드를 호출한 것과 같으며,
                               | 한 개의 값을 전달하는 요청 매개변수를 처리
                | paramValues  | request.getParameterValues() 메소드를 호출한 것과 같으며,
                               | 여러 개의 값을 전달하는 요청 매개변수를 처리
---------------------------

헤더 값  | header       | request.getHeader() 메소드를 호출한 것과 같으며 요청 헤더 이름의 정보를 단일 값으로 반환
        | headerValues  | request.getHeader() 메소드를 호출한 것과 같으며 요청 헤더 이름의 정보를 배열로 반환
---------------------------

쿠키값        | Cookies       | 쿠키 이름의 값을 반환
---------------------------

JSP 내용      | pageContext  | pageContext 객체를 참조할 때 사용
---------------------------

초기 매개변수 | initParam  | 컨텍스트의 초기화 매개변수 이름의 값을 반환
---------------------------

■ requestScope를 사용하면
- request 객체에 바인딩된 데이터에 접근할 수 있다.
- session이나 application 객체에 바인딩된 데이터는 sessionScope나 applicationScope로 접근할 수 있다.

■ Collection 객체 사용
    ${Collection 객체이름[index].속성이름}

■ HashMap 사용
    ${HashMap객체이름.키이름}

■ has-a 관계 빈 실습
: 객체가 다른 객체를 속성으로 가지는 경우를 has-a 관계라고 한다.

사용형식은
    ${부모이름.자식속성이름.속성이름}

----------------------------------------------

14.3 표현 언어로 바인딩 속성 출력하기

표현언어를 사용하면 자바 코드를 사용하지 않고
바인딩된 속성 이름으로 바로 값을 출력할 수 있다.

ex)
1) request.setAttribute("id", "hong");
    ---> <jsp:forward page="포워드 페이지.jsp"/> --->
    String id = (String)request.getAttribute("id");

    표현식              : <%= id%>
    바인딩 된 속성이름  : ${id}

2) MemberBean member = new MemberBean("lee", "1234");
    request.setAttribute("member", member);
     ---> <jsp:forward page="포워드 페이지.jsp"/> --->

    // 바인딩 시 속성으로 각각의 MemberBean 속성에 접근하여 출력
    ${member.id}
    ${member.pwd}

3) List membersList = new ArrayList();
    MemberBean m1 = new MemberBean("lee", "1234");
    membersList.add(m1);
    request.setAttribute("membersList", membersList);
    ---> <jsp:forward page="포워드 페이지.jsp"/> --->

    // 표현 언어에서 속성 이름으로 ArrayList에 접근한 후 인덱스를 이용해 첫 번째 회원 정보 출력
    ${membersList[0].id}
    ${membersList[0].pwd}

■ 스코프 우선순위
    page > request > session > application

----------------------------------------------

14.4 커스텀 태그

■ 커스텀 태그 종류(2가지)
1) JSTL(JSP Standard Tag Libraray)
    : JSP 페이지에서 가장 많이 사용하는 기능을 태그로 제공하며,
      JSTL 라이브러리를 따로 설치해서 사용

2) 개발자가 만든 커스텀 태그
    : 스트러츠나 스프링 프레임워크에서 미리 만들어서 제공

----------------------------------------------

14.5 JSP 표준 태그 라이브러리(JSTL)

    http://tomcat.apache.org/download-taglibs.cgi
    에서 다운로드 한다.

----------------------------------------------

14.6 Core 태그 라이브러리 사용하기

- 자바로 구현한 변수 선언, 조건식, 반복문 기능들을 태그로 대체한다.
- 사용전 반드시 taglib 디렉티브 태그를 선언해야 한다.
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

■ Core 태그 라이브러리 기능

- 변수선언
<c:set>         : JSP 페이지에서 변수를 지정
<c:remove>      : 지정된 변수를 제거

- 흐름제어
<c:if>          : 조건문 사용
<c:choose>      : switch문을 사용 <c:when>과 <c:otherwise> 서브 태그를 갖는다.
<c:forEach>     : 반복문을 사용
<c:forTokens>   : 구분자로 분리된 각각의 토큰을 처리할 때 사용

-URL 처리
<c:import>      : URL을 이용해 다른 자원을 JSP 페이지에 추가
<c:redirect>    : response.sendRedirect()기능을 수행
<c:url>         : 요청 매개변수로부터 URL을 생성

- 기타 태그
<c:catch>       : 예외 처리에 사용
<c:out>         : JspWriter에 내용을 처리한 후 출력

----------------------------------------------

14.6.1 <c:set> 태그

■ <c:set> 태그
    <c:set var="변수 이름" value="변수값" [scope="scope 속성 중 하나"] />

----------------------------------------------

14.6.2 <c:remove> 태그

■ <c:remove> 태그 형식
    <c:remove var="변수 이름" [scope="scope 속성 중 하나"] />

----------------------------------------------

14.6.3 <c:if> 태그

■ <c:if> 태그 형식
    <c:if test="${조건식}" var="변수이름" [scope="scope 속성 중 하나"] />
    ...
    </c:if>

----------------------------------------------

14.6.4 <c:choose> 태그

■ <c:choose> 형식
    <c:choose>
        <c:when test="조건식1"> 본문내용1 </c:when>
        <c:when test="조건식2"> 본문내용2 </c:when>
    </c:choose>

----------------------------------------------

14.6.5 <c:forEach> 태그

■ <c:forEach> 형식
    <c:forEach var="변수이름" items="반복할객체이름" begin="시작값" end="마지막값" step="증가값" varStatus="반복상태변수이름">
    ...
    </c:forEach>

----------------------------------------------

14.6.6 <c:url> 태그

■ <c:url> 태그 형식
    <c:url var="변수이름" value="URL 경로" [scope="scope 속성 중 하나"]
        [ <c:param name="매개변수이름" value="전달값" /> ]
        ...
    </c:url>

----------------------------------------------

14.6.7 <c:redirect> 태그

■ <c:redirect> 태그 형식
    <c:redirect url="redirect할 URL">
        [ <c:param name="매개변수이름" value="전달값" /> ]
    </c:redirect>

----------------------------------------------

14.6.8 <c:out> 태그

■ <c:out> 태그 형식
    <c:out value="출력값" default="기본값" [escapeXml="boolean 값"] />

- value : 출력할 값
- default : value 속성에 지정된 값이 없을 때 출력할 기본 값
- escapeXml : escape 문자를 변환하는 역할(생략할 수 있으며 기본값은 true )

----------------------------------------------

14.7 Core 태그 라이브러리 실습 예제

■ 

----------------------------------------------

14.8 다국어 태그 라이브러리 사용하기

■ 태그 라이브러리 종류
<fmt:setLocale> : Locale(언어)을 저장
<fmt:message>   : 지정한 언어에 해당하는 언어를 표시
<fmt:setBundel> : 사용할 번들을 지정
<fmt:setParam>  : 전달할 매개변수를 지정
<fmt:requestEncoding>   : 요청 매개변수의 문자 인코딩을 지정

----------------------------------------------

14.9 한글을 아스키 코드로 변환하기

Help > install New Software
Name : [원하는 이름]
Location : https://osdn.net/projects/propedit/storage/eclipse/updates/

----------------------------------------------

14.10 포매팅 태그 라이브러리 사용하기

<fmt:timeZone>      : 지정한 국가의 시간을 지정하는 태그
<fmt:setTimeZone>   : 지정한 국가의 시간을 지정하는 태그
<fmt:formatNumber>  : 표시할 숫자의 형식을 지정
<fmt:formatDate>    : 지정한 형식의 날짜를 표시

----------------------------------------------

14.11 문자열 처리 함수 사용하기

fn:contain(A, B)    : 문자열 A에 문자열 B가 포함되어 있는지 확인
fn:endWith(A, B)    : 문자열 A의 끝이 B로 끝나는지 확인
fn:indexOf(A, B)    : 문자열 A에서 B가 처음으로 위치하는 인덱스(index)를 반환
fn:length(A)        : 문자열 A의 전체 길이를 반환
fn:replace(A, B, C) : 문자열 A에서 B까지 해당하는 문자를 찾아 C로 변환
fn:toLowerCase(A)   : A를 모두 소문자로 변환
fn:toUpperCase(A)   : A를 모두 대문자로 변환
fn:substring(A, B, C): A에서 인덱스 번호 B~ C까지 해당하는 문자열을 반환
fn:split(A, B)    : A에서 B기준(지정한 문자열)로 나누어 배열로 변환
fn:trim(A)          : 문자열 A에서 아ㅠ뒤 공백을 제거

----------------------------------------------

14.12 표현 언어와 JSTL 을 이용한 회원 관리 실습

----------------------------------------------
15장 JSP 페이지를 풍부하게 하는 오픈 소스 기능
----------------------------------------------

15.1 JSP에서 파일 업로드

■ 라이브러리 다운로드
https://commons.apache.org/proper/commons-fileupload/
https://commons.apache.org/proper/commons-io/download_io.cgi

※ 파일 업로드창에서 업로드 할 때는 
    <form>태그의 encType 속성은 반드시 multipart/form-data로 지정해야 한다.

----------------------------------------------

15.2 JSP 에서 파일 다운로드

1) first.jsp    : 파일 다운로드할 파일 이름을 매개변수로 전달
2) result.jsp   : 다운로드할 파일 이름 가져오기
3) FileDownload.java    :  download.do 서블릿으로
    OutputStream 가져오기
    버퍼를 만든 후
    while 반복문을 이용해 파일에서 데이터를 한번에 8KB씩 버퍼에 읽어온다.
    이어서 OutputStream의 write() 메소드를 이용해 다시 브라우저로 출력

----------------------------------------------
16장 HTML5와 제이쿼리
----------------------------------------------

16.1 HTML5의 주요 개념

16.2 HTML5 시맨틱 웹을 위한 구성 요소

■ 여러가지 태그
<header>    머리말을 나타내는 태그
<hgroup>    제목과 부제목을 묶는 태그
<nav>       메뉴 부분을 나타내는 태그
<section>   제목별로 나눌 수 있는 태그
<article>   개별 콘텐츠를 나타내는 태그
<aside>     왼쪽 또는 오른쪽에 위치하는 사이드 바를 나타내는 태그
<footer>    하단의 정보를 표시하는 태그

----------------------------------------------

16.3 제이쿼리 주요 개념

■ 제이쿼리(jQuery)
: 화면의 동적 기능을 자바스크립트보다 좀 더 쉽고 편리하게 개발할 수 있게 해주는 자바스크립트 기반 라이브러리

■ 제이쿼리 사용 방법(2가지)
1) www.jquery.com에서 라이브러리 다운로드 사용
2) 네트워크로 CDN 호스트를 설정해서 사용
    <script src="http://code.jquery.com/jquery-lastest.min.js"></script>

----------------------------------------------

16.4 제이쿼리의 여러 가지 기능

■ 여러가지 선택자
$("*")      : 모든 DON 선택
$("#id")    : 해당하는 id를 가지는 DOM 선택
$("elementName")    : 해당되는 이름을 가지는 DOM 선택
$(".className")     : css중 해당하는 클래스 이름을 가지는 DOM 선택
$("selector1, selector2, ...")  : 해당되는 선택자를 가지는 여러 DOM을 선택

----------------------------------------------

16.5 제이쿼리 Ajax 기능

■ Ajax의 정의
: Asynchronous Javascript(비동기 자바스크립트) + XML의 의미로
  자바스크립트를 사용한 비동기 통신,
  즉 클라이언트와 서버간의 XML이나 JSON 데이터를 주고받는 기술

■ 제이쿼리 Ajax 기능 관련 속성들
- type      : 통신 타입을 설정(post 또는 get 방식)
- url       : 요청할 url을 설정
- async     : 비동식으로 처리할지의 여부를 설정(false인 경우 동기식으로 처리)
- data      : 서버에 요청할 때 보낼 매개변수를 설정
- dataType  : 응답 받을 데이터 타입을 설정(XML, TEXT, HTML, JSON 등)
- success   : 요청 및 응답에 성공했을 때 처리 구문을 설정
- error     : 요청 및 응답에 실패했을 때 처리 구문을 설정
- complete  : 모든 작업을 마친 후 처리 구문을 설정

----------------------------------------------

16.6 제이쿼리에서 JSON 사용하기

■ JSON 정의
- JSON(Javascript Object Notation)은 name/value 쌍으로 이루어진 데이터 객체를 전달하기 위해
  인간이 읽을 수 있는 텍스트를 사용하는 개방향 표준 데이터 형식
- 비동기 브라우저/서버 통신(Ajax)을 위해 XML을 대체하는 데이터 전송 형식 중 하나
- 자바스크립트에서 파생된 것이므로 자바스크립트의 구문 형식을 따르지만
  프로그래밍 언어나 플랫폼에 독립적이어서 쉽게 사용할 수 있다.

■ JSON의 여러 가지 자료형
- 수 -  정수 -실수(고정소수점)
             - 실수(부동소수점)
- 문자열 - 문자열
         - 제어문자
- 배열 : 대괄호[]로 표현
- 객체 : 중괄호{}로 표현

----------------------------------------------

16.6.2 Ajax 이용해 서버와 JSON 데이터 주고받기

서버의 서블릿에서 JSON 을 사용하려면 JSON 라이브러를 설치해야 한다.
    https://code.google.com/archive/p/json-simple/downloads
    
----------------------------------------------
17장 모델2 방식으로 효율적으로 개발하기
----------------------------------------------

17.1 웹 애플리케이션 모델

■ 웹 애플리케이션 모델
- 표준화된 소스 구조
- 모델1과 모델2 방식이 있다.

■ 모델1 방식
- 데이터베이스 연동 같은 비즈니스 로직 작업과 그 작업 결과를 나타내주는 작업을 동일한 JSP에서 수행한다.
- 모든 클라이언트의 요청과 비즈니스 로직 처리를 JSP가 담당하는 구조
- 기능 구현이 쉽고 편리하지만 "유지보수가 어렵다."
    - 예시로 의류 쇼핑몰은 계절에 따라 화면도 업데이트해 줘야 하므로 유지 보수에 불편하다.

■ 모델2 방식
- 웹 애플리케이션의 각 기능(클라이언트의 요청 처리, 응답 처리, 비즈니스, 로직 처리)을 분리해서 구현
- 객체 지향 프로그래밍에서 각각의 기능을 모듈화해서 개발하자는 원리

■ 모델2 방식 특징
- 각 기능이 서로 분리되어 있어 개발 및 유지보수가 쉽다.
- 각 가능(모듈)의 재사용성이 높다
- 디자이너와 개발자의 작업을 분업화해서 쉽게 개발할 수 있다.
- 모델2 방식과 관련된 기능이나 개념의 학습이 필요하다.

----------------------------------------------

17.2 MVC 디자인 패턴

■ MVC란?
- Model - View - Controller(모델 - 뷰 - 컨트롤러)의 약자로, 일반 PC 프로그램 개발에 사용되는 디자인 패턴을
  웹 애플리케이션에 도입한 것
- 즉 웹 애플리케이션 화면 부분, 요청 처리 부분, 로직 처리 부분으로 나누어 개발하는 방법

■ MVC 특징
- 각 기능이 분리되어 있어 개발 및 유지보수가 편리하다.
- 각 가능의 재사용성이 높아진다.
- 디자이너와 개발자의 작업을 분업화해서 쉽게 개발할 수 있다.

■ MVC 구성 요소
□ Controller : 사용자의 요청 및 흐름 제어를 담당
- 서블릿이 컨트롤러의 역할을 한다.
- 클라이언트의 요청을 분석한다.
- 요청에 대해서 필요한 모델을 호출
- Model 에서 처리한 결과를 보여주기 위해 JSP를 선택

□ Model : 비즈니스 로직 처리
- 데이터베이스 연동과 같은 비즈니스 로직을 수행
- 일반적으로 DAO와 VO 클래스로 이루어져 있다.

□ View : 사용자에게 보여줄 화면 담당
- JSP가 화면 기능을 담당
- Model 에서 처리한 결과를 화면에 표시

----------------------------------------------

17.3 MVC를 이용한 회원 관리
17.3.1 회원 정보 조회 기능 구현

1) 브라우저에서 /mem.do 로 요청
2) 서블릿인 MemberController 가 요청을 받아 MemberDAO의 listMembers() 메소드를 호출
3) MemberDAO의 listMembers() 메서드인 SQL문으로 회원 정보를 조회한 후 회원 정보를
    MemberVO에 설정하여 반환
4) 다시 MemberController에서 조회한 회원 정보를 회원 목록창 listMembers.jsp로 포워딩
5) 회원 목록창(listMembers.jsp)에서 포워딩한 회원 정보를 목록으로 출력

----------------------------------------------

17.3.2 회원 정보 추가 기능 구현

■ 커맨드(Command) 패턴
- 브라우저가 URL 패턴을 이용해 컨트롤러에게 수행 작업을 요청하는 방법
- 컨트롤러는 HttpServletRequest의 getPathInfo()의 메소드를 이용해 URL 패턴을 요청명을 받아와 작업을 수행

형식 ex)
    http://127.0.0.1:8090/pro17/member/listMembers.do

    1) /member : 회원 기능을 의미
    2) listMembers.do : 회원 기능 중 회원 조회 기능을 의미

----------------------------------------------

17.3.3 회원 정보 수정 및 삭제 기능 구현
- 수정
1) 회원 정보 수정창에서 회원 정보를 수정하고 수정하기를 클릭해 /member/modMember.do로 컨트롤러에 요청
2) 컨트롤러는 전송된 회원 수정 정보를 가져온 후 테이블에서 회원 정보를 수정
3) 수정을 마친 후 컨트롤러는 다시 회원 목록창을 보여준다.

- 삭제
1) 회원 목록창에서 삭제를 클릭해 요청명 /member/delMember.do 와 회원 ID를 컨트롤러로 전달
2) 컨트롤러는 request의 getPathInfo() 메소드를 이용해 요청명을 가져온다.
3) 회원 ID를 SQL문으로 전달해 테이블에서 회원 정보를 삭제한다.

----------------------------------------------

17.4 모델2로 답변형 게시판 구현하기
17.4.1 게시판 글 목록 보기 구현
(글 목록을 계층형으로 구현)

: 브라우저에서 /board1/listArticles.do 로 요청하면 Controller가 전달받아 Service와 DAO를 거쳐
  글 정보를 조회한 후 listArticles.jsp로 전달하여 화면에 글 목록을 보여준다.

- BoardController 클래스는 요청시 화면에 글 목록을 출력하는 역할을 한다.
  getPathInfo() 메소드를 이용해 action 값을 가져오고 action 값이 null 이거나 /listArticles.do 일 경우
  BoardSercie 클래스의 listArticles() 메소드를 호출해 전체 글을 조회한다.
  그리고 조회한 글을 articlesList 속성으로 바인딩하고 글 목록창(listArticles.jsp)으로 포워딩한다.

----------------------------------------------

17.4.2 게시판 글쓰기 구현

■ 글쓰기 과정
1. 글 목록창(listArticles.jsp)에서 글쓰기창을 요청
2. 글쓰기창에서 글을 입력하고 컨트롤러에서 /board2/addArticle.do로 글쓰기를 요청
3. 컨트롤러에서 Service 클래스로 글쓰기창에서 입력한 글 정보를 전달해 테이블에 글을 추가
4. 새 글을 추가하고 컨트롤러에서 다시 /board2/listArticles.do로 요청하여 전체 글을 표시

----------------------------------------------
20장 스프링 AOP 기능
----------------------------------------------

20.2 스프링에서 AOP 기능 사용하기

■ 여러가지 AOP 관련 용어
- aspect 구현하고자 하는 보조 기능을 의미
- advice aspect의 실제 구현체(클래스)를 의미. 메소드 호출을 기준으로 여러 지점에서 실행
- joinpoint : advice를 적용하는 지점을 의미. 스프링은 method 결합점만 제공
- pointcut : advice가 적용되는 대상을 지정. 패키지 이름/클래스이름/메소드 이름을 정규식으로 지정하여 사용
- target : advice가 적용되는 클래스를 의미
- weaving : advice를 주기능에 적용하는 것을 의미

20.2.1 스프링 API를 이용한 AOP 기능 구현 과정
1. 타깃(target) 클래스를 지정
2. 어드바이스(Advice) 클래스를 지정
3. 설정 파일에서 포인트컷(piontcut)을 설정
4. 설정 파일에서 어드바이스와 포인트컷을 결합하는 어드바이저를 설정
5. 설정 파일에서 스프링의 PoxtFactoryBean 클래스를 이용해 타깃에 어드바이스를 설정
6. getBean() 메소드로 빈 객체에 접근해 사용

----------------------------------------------

20.2.2 스프링 API를 이용한 AOP 기능 실습

예제대로 하니 문제가 발생
- 원인 : 자바 버전과 스프링 라이브러리 호환 문제.

https://repo.spring.io/ui/repos/tree/General/libs-release/org/springframework/spring/5.3.9/spring-5.3.9-dist.zip

여기서 스프링 라이브러리 다운 후 실행하니 정상 작동

----------------------------------------------
21장 스프링 MVC 기능
----------------------------------------------

21.1 스프링 프레임워크 MVC의 특징

■ 스프링에서 지원하는 MVC 기능의 특징
- 모델2 아키텍처를 지원
- 스프링과 다른 모듈과의 연계가 용이
- 타일즈(tiles)나 사이트메시(sitemesh)같은 View 기술과의 연계가 용이
- 태그 라이브러리를 통해 message 출력, theme 적용 그리고 입력 폼을 보다 쉽게 구현할 수 있다.

■ 스프링 프레임워크 MVC 구성 요소
- DispatcherServlet
    : 클라이언트의 요청을 전달받아 해당 요청에 대한 컨트롤러를 선택하여 클라이언트의 요청을 전달
- HandlerMapping
    : 클라이언트가 요청한 URL을 처리할 컨트롤러를 지정
- Controller
    : 클라이언트의 요청을 처리한 후 그 결과를 DispatcherServlet에 전달
- ModelAndView
    : 컨트롤러가 처리한 결과 및 뷰 선택에 필요한 정보를 저장
- ViewResolver
    : 컨트롤러의 처리 결과를 전달할 뷰를 지정
- View
    : 컨트롤러의 처리 결과 화면을 생성

■ 스프링 프레임워크 MVC 기능 수행 과정
1. 브라우저가 DispatcherServlet에 URL을 접근하여 해당 정보를 요청
2. 핸들러 매핑에서 해당 요청에 대해 매핑된 컨트롤러가 있는지 요청
3. 매핑된 컨트롤러에 대해 처리를 요청
4. 컨트롤러가 클라이언트의 요청을 처리한 결과와 View 이름을 ModelAndView에 저장해서
   DispatcherServlet으로 반환
5. DispatcherServlet 에서는 컨트롤러에서 보내온 View 이름을 ViewResolver로 보내 해당 View를 요청
6. ViewResolver는 요청한 View를 보낸다.
7. View 의 처리 결과를 DispatcherServlet으로 보낸다.
8. DispatcherServlet은 최종 결과를 브라우저로 전송

----------------------------------------------

21.2 SimpleUrlController 이용해 스프링 MVC 실습하기

■ 파일 설명
- web.xml
    : 브라우저에서 *.do로 욫ㅇ 시 스프링의 DispatcherServlet 클래스가 요청을 받을 수 있게 서플릿 매핑
- action-servlet.xml
    : 스프링 프레임워크에서 필요한 빈들을 설정
- SimpleUrlController.java
    : 매핑된 요청에 대한 컨트롤러의 기능을 수행
- index.jsp
    : 요청에 대해 컨트롤러가 브라우저로 전송하는 jsp

----------------------------------------------
